Should we start? Yeah, let's let's get rolling great. So welcome everyone to this new product field session today. We're talking about product thinking. So what is it and how do we use that in practice? How do we communicate with that? So this is called product deal, but it's something that absolutely everyone can use, and it is recommended to use that so encourage others to use these principles as well. Yeah, so just this is the same slide as always, as a reminder for creating this training program for product managers centered around these three dimensions that are the core that form the three core dimensions of what PMS are expected to do so around strategy, delivery and communication. And so today, I think what we're going to talk about spans all these three things, but with some emphasis on the communication. And how do we do that in practice? So I want to talk about three, three principles for product thinking. It's not necessarily the everything that could fall under Product thinking, but this is what Laura and I were thinking. Is really what what people should care about most. So first we have identifying and understanding users problems and ideally finding solutions for this problem. So just a reminder is that at the end of the day, our product is there to help users figure out or do things in a better way that than what they have today, being outcome oriented, so making sure that we actually solve the problems that we've identified. So we don't build features to build features, we build features to deliver outcomes, and the outcome is to solve these problems. And finally, using using assumptions to ensure success, which, which is, in fact, what underpins the whole agile and iterative approach. So I'll go through these in the next slides. But first I want to start with construct, contrasting, sorry, products with other roles, just as introduction. And this is not meant to be a reflection of that other roles, like if they're good or bad, but just to really underline what we think is really different with product. So when you think about project management, project thinking, a project manager cares about when, how much and who, as in, who owns something. So what are the tasks that needs to be done? What are the deliverables that need to be done. How much do they cost? How are we tracking against the budget? And then, when do these things need to be completed and who needs to do it? And that's really the job of a project manager to track these things. Engineers care about how we're going to build something, and of course, to do that, but what do we need to build? But it's not their job to find out the what and the why. The priority is to figure out what they really own. Is to figure out the How are we going to build that? And finally, product thinking is really about the what, the why and who, as in, who is it for? So we need to think about, what are we building so essentially, what problems are we solving? Why are we building it? Why is this problem important to solve, and who are we building for? So who has the problem? How is it going to be used? And what do we know about the context and the user that is the that is going to to use the product. So with that, I'm going to talk a little bit about my first theme, which is problems. So we see the first principle of product thinking that we want to highlight today is that at the end of the day, we're here to solve problems. So. So that means we need to look at users build. That's why we build user personas. So we want to understand their expectations, their challenges, and how they do what what they do today. We We suggest using the jobs to be done, framework, which I'll come back to later. But essentially, like, what are they trying to do? How are they doing that today? How is it or not problematic? And then, how can we offer better solutions to do that? And so the jobs to be done. Framework has a very famous example, which is people don't buy drills. They buy a tool to make holes, meaning that nobody is nobody cares about actually buying a drill. What they care is about the ability to to make holes so that they can do some construction or Hank into pictures on the walls. And so that means that if you can find a better way, if you can identify what's problematic with drills, and you can find a better way that's not a drill, then you might be successful at competing against drills, but not necessarily by building a better drill, just by building something different that also can make holes in a faster or easier or cheaper way.
So this is a question. Nope. Sorry. I'm on a walk and I came off mute. I'm so sorry. No worries. So this is the typical example in our world. There's a very simple one, like utilities. In in many cases don't care about demand response as such. What they care is about an efficient way to manage peak load. So there's, there are several ways to manage peak load. You can invest in a bigger in a bigger system, you can or you can try and manage the demand. Yeah, any any question on this first part.

So this is a question. Nope. Sorry. I'm on a walk and I came off mute. I'm so sorry. No worries. So this is the typical example in our world. There's a very simple one, like utilities. In in many cases don't care about demand response as such. What they care is about an efficient way to manage peak load. So there's, there are several ways to manage peak load. You can invest in a bigger in a bigger system, you can or you can try and manage the demand. Yeah, any any question on this first part.
So our first principle product thinking is that identifying problems, that's what we're here to do, and then brainstorming the solutions and getting them, getting them built to solve the problems. My second point is on outcomes. We don't want to focus on features. We want to focus on outcomes. So you can build a feature that absolute, that brings no value to the customer, because it's not it's not usable, it's not exactly what the customer wanted, or some other reason. So what we want to measure is not, what we want to think about is not what whether we'll tick the box of building the feature, but whether the feature that we're building is helping us deliver the outcome that we want, which slides into what we discussed last week, the success metrics. So put some of them on the side here. So for example, the one outcome we want to drive is to reduce, reduce the OPEX. And so one way we measure that is by measuring the customer acquisition cost, for example. And so if we build a feature that is successful as at minimizing customer acquisition cost, then we're delivering something that will help utilities reduce their OPEX, which is the outcome we want. So you can think about this at a high level, like, why are we doing some kind of initiative? Why are we launching a project, but also just at the feature or or even user story level, this is exactly what we do with acceptance criteria, right? What are the things that the feature must deliver so that we can call it done? What is our definition of Done? Same principle, right? There's a difference between our feature does x and our feature does x in real time at a scale of 10,000 users, and in a secure way where the the outcome is. Delivered and meets all of the criteria, but the the that are needed to deliver the outcome, we want two examples, again, Spotify. So Spotify shows you has a feature that shows you new new songs, and so that's the feature. But the outcome here is actually increasing the user satisfaction, increasing the engagement, by attracting users to this, to this, and showing them new songs that Spotify, thing that like. And so it's very different from it's, no doubt, randomly selecting some songs to show the users. It's about selecting some songs that Spotify things you like so that they can increase user engagement and user satisfaction. Another very simple example with OEM integrations or connectors. We don't care so much about the integrations themselves, what we're actually trying to do is to bring some flexible megawatts on the platform so that utilities can use those megawatts For delivering demand response and flexibility. Any any questions.

So our first principle product thinking is that identifying problems, that's what we're here to do, and then brainstorming the solutions and getting them, getting them built to solve the problems. My second point is on outcomes. We don't want to focus on features. We want to focus on outcomes. So you can build a feature that absolute, that brings no value to the customer, because it's not it's not usable, it's not exactly what the customer wanted, or some other reason. So what we want to measure is not, what we want to think about is not what whether we'll tick the box of building the feature, but whether the feature that we're building is helping us deliver the outcome that we want, which slides into what we discussed last week, the success metrics. So put some of them on the side here. So for example, the one outcome we want to drive is to reduce, reduce the OPEX. And so one way we measure that is by measuring the customer acquisition cost, for example. And so if we build a feature that is successful as at minimizing customer acquisition cost, then we're delivering something that will help utilities reduce their OPEX, which is the outcome we want. So you can think about this at a high level, like, why are we doing some kind of initiative? Why are we launching a project, but also just at the feature or or even user story level, this is exactly what we do with acceptance criteria, right? What are the things that the feature must deliver so that we can call it done? What is our definition of Done? Same principle, right? There's a difference between our feature does x and our feature does x in real time at a scale of 10,000 users, and in a secure way where the the outcome is. Delivered and meets all of the criteria, but the the that are needed to deliver the outcome, we want two examples, again, Spotify. So Spotify shows you has a feature that shows you new new songs, and so that's the feature. But the outcome here is actually increasing the user satisfaction, increasing the engagement, by attracting users to this, to this, and showing them new songs that Spotify, thing that like. And so it's very different from it's, no doubt, randomly selecting some songs to show the users. It's about selecting some songs that Spotify things you like so that they can increase user engagement and user satisfaction. Another very simple example with OEM integrations or connectors. We don't care so much about the integrations themselves, what we're actually trying to do is to bring some flexible megawatts on the platform so that utilities can use those megawatts For delivering demand response and flexibility. Any any questions.

Okay, my, my third point is about assumptions. And so the way I think about assumption is really what needs to be true for us to succeed. It is really what what underpins the Agile process, because if we can make assumptions and validate them step by step, then we don't need to build the entire product to know if it's going to be successful, and so that's how we can be truly agile and iterative. That's also about thinking about implicit assumptions. So we think that if we build feature a, we'll deliver outcome B. But maybe there's something that needs to be true as well. In addition to building the feature a that we haven't thought about and that will prevent us from achieving our outcome. And so the best, or maybe not the best, but a simple way to approach these assumptions, first of course, to be aware of them, to be aware that this is what we do, what we should be doing as product managers. But also Marty cading In inspired, which I encourage everyone to read, if you haven't, or at least find a summary. It's well worth 15 minutes or a few hours of your time. So Martin Cadin has identified these four basics that are really about identifying assumptions and trying to validate them. So the first one is, is value? Very simple like, is, is this really solving the problem for my user, or is the value for the user in the thing that I'm thinking about building? Because when you put something on a roadmap, you're de facto assuming. You're making an implicit assumption that users are going to find value with this. But it might not be true. Usability is about making sure that it's user are actually going to be able to use it. So it could be like, do we to build this feature? Do we need to have some kind of is there some kind of user journey that requires 15 clicks and that nobody is actually going to go through. Or does it require the user to do something that they're unlikely to do? So this is this one in particular. Is why we have a UX team that can help us do some research with markups. That's that's typically what we would try and explore with that. So that's usability. The third one is feasibility. So this is, in general, mostly that technical feasibility. So we're thinking about something that will let us optimize in real time, 150,000 thermostats. You know, your engineers might tell you that 150,000 thermostats, you shouldn't even think about it, or maybe not in real time. And so that's, that's really what you're going to explore there. Similarly to UCB. What you might do here is run a technical POC. So can we run a small optimization POC to understand whether we can do this thing in real time, or where we can do this thing at scale? And if not like, what can we do? And the final risk viability is mostly about financial viability. So can we make money with this thing? Can we run it profitably? Or to use, for example, my my previous examples on optimizing 150,000 thermostat in real time, maybe that's going that's going to cost us $20 per thermostat, and so it's completely it's technically feasible, but not financially viable to do that. So for risks that are really a good, good guide to help you identify assumptions and validate those assumptions before you actually set up to build the entire thing. And two examples, Dropbox is very famous. Before building the entire thing, they just created a fake video. They uploaded that, and they had, they had a link to their Beta sign up in there, and so 10s of 1000s of people signed up for the data, up and seeing the video, so they were able to validate that users would find value in in a service like that. And then another example from from our world. So something that's that we're looking at in Europe today. There's a client who wants to use publicly charged network for energy markets participation. And so that all sounds great. It's it's a really cool idea, but they want to do this without providing incentives to the to the users. So they're making the assumptions that users are going to sign up for this kind of this kind of demand response program without incentives. They're making the assumptions that users will agree to have their charge curtailed on publicly charging charging points. And they're making the assumption that there's going to be, at any point in time, there's going to be enough loads, aggregated loads so to meet the energy markets participation thresholds. And so even before building the entire thing, we can ask these questions, try and look at data to see if we can, if we reasonably think this is going to work or not, and if not, what can we do about it? What do we need to shift about the project? So, very simple example, of course, it's much more likely to succeed if you offer some kind of incentive to force to encourage users to sign up and in exchange for the incentive to force them to actually Give control on their EBS.

Okay, that was that was me. So on product thinking, three simple but core principles. We're here to find problems and solutions. We're here to deliver outcomes, and we need to use assumptions as a tool to make sure we're going to be successful in delivering these outcomes. And now I'll hand it over to Laura to talk about how to use that in practice and how to communicate through the lens of product thinking. Sweet. Thank you. Guillaume, as as noted, product so like, okay, cool.